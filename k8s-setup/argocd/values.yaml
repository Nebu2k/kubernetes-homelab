# ArgoCD Helm Values
# Based on Argo CD v3.0.x

global:
  image:
    repository: quay.io/argoproj/argocd
    tag: v3.0.6
  
  # Domain configuration
  # ⚠️ Replace with your domain
  domain: argocd.example.com
  
  # Additional labels for all resources
  additionalLabels: {}

# ArgoCD Configurations
configs:
  # ArgoCD configuration
  cm:
    # Server configuration
    # ⚠️ Replace with your domain
    url: https://argocd.example.com
    
    # OIDC configuration (optional)
    # oidc.config: |
    #   name: OIDC
    #   issuer: https://your-oidc-provider.com
    #   clientId: argocd
    #   clientSecret: $oidc.clientSecret
    #   requestedScopes: ["openid", "profile", "email", "groups"]
    
    # Repository configuration
    repositories: |
      - type: git
        url: https://github.com/argoproj/argocd-example-apps.git
      - type: helm
        url: https://argoproj.github.io/argo-helm
        name: argo
  
  # Repository credentials (optional)
  credentialTemplates: {}
  
  # ArgoCD parameters
  params:
    # Disable internal TLS since we're using ingress with TLS termination
    server.insecure: true
    
    # Application controller settings
    application.instanceLabelKey: argocd.argoproj.io/instance
    
    # Server settings
    server.grpc.web: true

# Controller configuration
controller:
  replicas: 1
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false  # Set to true if you have Prometheus Operator

# Server configuration
server:
  replicas: 2
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi
  
  # Ingress configuration
  ingress:
    enabled: false  # We'll create a separate ingress
  
  # Service configuration
  service:
    type: ClusterIP
    servicePortHttp: 80
    servicePortHttps: 443
  
  # Metrics
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false  # Set to true if you have Prometheus Operator

# Repository server configuration
repoServer:
  replicas: 2
  
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

# Application Set Controller (optional)
applicationSet:
  enabled: true
  replicas: 1
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Notifications controller (optional)
notifications:
  enabled: true
  
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Dex (OIDC) - disabled by default
dex:
  enabled: false

# Redis for caching
redis:
  enabled: true
  
  # Persistent storage for Redis - disabled for stateless setup
  persistence:
    enabled: false
  
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

# External Redis (if you want to use external Redis)
externalRedis:
  host: ""
  port: 6379
  username: ""
  password: ""
